
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useTickets = () => {
  const { currentUser } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Get ticket types for an event
  const useTicketTypes = (eventId?: string) => {
    return useQuery({
      queryKey: ['ticketTypes', eventId],
      queryFn: async () => {
        let query = supabase
          .from('ticket_types')
          .select('*')
          .eq('is_active', true);
        
        if (eventId) {
          query = query.eq('event_id', eventId);
        }
        
        const { data, error } = await query.order('created_at', { ascending: false });
        
        if (error) throw error;
        return data;
      },
      enabled: !!eventId,
    });
  };

  // Get all tickets for an event (admin view)
  const useEventTickets = (eventId?: string) => {
    return useQuery({
      queryKey: ['eventTickets', eventId],
      queryFn: async () => {
        let query = supabase
          .from('event_tickets')
          .select(`
            *,
            ticket_type:ticket_types(name, price),
            profiles(name, email)
          `);
        
        if (eventId) {
          query = query.eq('event_id', eventId);
        }
        
        const { data, error } = await query.order('purchase_date', { ascending: false });
        
        if (error) throw error;
        return data;
      },
      enabled: !!currentUser && currentUser.role === 'host' && !!eventId,
    });
  };

  // Get user's tickets
  const useUserTickets = () => {
    return useQuery({
      queryKey: ['userTickets', currentUser?.id],
      queryFn: async () => {
        if (!currentUser) return [];
        
        const { data, error } = await supabase
          .from('event_tickets')
          .select(`
            *,
            events(name, start_time, location, banner_url),
            ticket_type:ticket_types(name, description)
          `)
          .eq('user_id', currentUser.id)
          .order('purchase_date', { ascending: false });
        
        if (error) throw error;
        return data;
      },
      enabled: !!currentUser,
    });
  };

  // Purchase a ticket
  const purchaseTicket = useMutation({
    mutationFn: async (ticketData: {
      event_id: string;
      ticket_type_id: string;
      price: number;
      guest_name?: string;
      guest_email?: string;
    }) => {
      // Generate QR code data
      const qrData = `ticket:${ticketData.event_id}:${Date.now()}:${Math.random().toString(36).substr(2, 9)}`;
      
      // Create the ticket payload without ticket_number as it's auto-generated by trigger
      const ticketPayload = {
        event_id: ticketData.event_id,
        ticket_type_id: ticketData.ticket_type_id,
        price: ticketData.price,
        qr_code_data: qrData,
        user_id: currentUser?.id || null,
        guest_name: ticketData.guest_name || null,
        guest_email: ticketData.guest_email || null,
      };

      const { data, error } = await supabase
        .from('event_tickets')
        .insert(ticketPayload)
        .select('*')
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['userTickets'] });
      queryClient.invalidateQueries({ queryKey: ['eventTickets'] });
      toast({
        title: "Ticket Purchased Successfully!",
        description: "Your ticket has been added to your wallet.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Purchase Failed",
        description: error.message || "Could not purchase ticket. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Create ticket type (admin only)
  const createTicketType = useMutation({
    mutationFn: async (ticketTypeData: {
      event_id: string;
      name: string;
      price: number;
      description?: string;
      max_quantity?: number;
      available_quantity: number;
    }) => {
      const { data, error } = await supabase
        .from('ticket_types')
        .insert({
          ...ticketTypeData,
          created_by: currentUser?.id,
        })
        .select('*')
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['ticketTypes'] });
      toast({
        title: "Ticket Type Created",
        description: "New ticket type has been added successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Creation Failed",
        description: error.message || "Could not create ticket type.",
        variant: "destructive",
      });
    },
  });

  return {
    useTicketTypes,
    useEventTickets,
    useUserTickets,
    purchaseTicket,
    createTicketType,
  };
};
